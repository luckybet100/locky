// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.0
// source: protobuf/terminal/gateway.proto

package terminal

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Gateway_TestLicence_FullMethodName     = "/locky.ai.Gateway/TestLicence"
	Gateway_ListUsers_FullMethodName       = "/locky.ai.Gateway/ListUsers"
	Gateway_GetUserById_FullMethodName     = "/locky.ai.Gateway/GetUserById"
	Gateway_GetUserByToken_FullMethodName  = "/locky.ai.Gateway/GetUserByToken"
	Gateway_SetUserFace_FullMethodName     = "/locky.ai.Gateway/SetUserFace"
	Gateway_SubscribeUnlock_FullMethodName = "/locky.ai.Gateway/SubscribeUnlock"
)

// GatewayClient is the client API for Gateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GatewayClient interface {
	// проверка лицензии
	TestLicence(ctx context.Context, in *TestLicenceIn, opts ...grpc.CallOption) (*TestLicenceOut, error)
	// получение списка юзеров
	// получаем батчами список через ListUsers и сохраняем в БД (вместе с эмбендингами)
	ListUsers(ctx context.Context, in *ListUsersIn, opts ...grpc.CallOption) (*ListUsersOut, error)
	GetUserById(ctx context.Context, in *GetUserByIdIn, opts ...grpc.CallOption) (*GetUserByIdOut, error)
	// получение профиля юзера по QR коду (передаем на бек его содержимое)
	GetUserByToken(ctx context.Context, in *GetUserByTokenIn, opts ...grpc.CallOption) (*GetUserByTokenOut, error)
	// отправка массива эмбендингов
	SetUserFace(ctx context.Context, in *SetUserFaceIn, opts ...grpc.CallOption) (*SetUserFaceOut, error)
	// подписка на события об дистанционном открытии двери (для мобильного приложения)
	// передаем в запрос последнее примененное событие об открытии
	// при получении события валидируем время (должно быть больше чем последнее примененнное и отличаться не более чем 1 минуту от времени в системе)
	SubscribeUnlock(ctx context.Context, in *SubscribeUnlockIn, opts ...grpc.CallOption) (grpc.ServerStreamingClient[UnlockEvent], error)
}

type gatewayClient struct {
	cc grpc.ClientConnInterface
}

func NewGatewayClient(cc grpc.ClientConnInterface) GatewayClient {
	return &gatewayClient{cc}
}

func (c *gatewayClient) TestLicence(ctx context.Context, in *TestLicenceIn, opts ...grpc.CallOption) (*TestLicenceOut, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TestLicenceOut)
	err := c.cc.Invoke(ctx, Gateway_TestLicence_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) ListUsers(ctx context.Context, in *ListUsersIn, opts ...grpc.CallOption) (*ListUsersOut, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListUsersOut)
	err := c.cc.Invoke(ctx, Gateway_ListUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) GetUserById(ctx context.Context, in *GetUserByIdIn, opts ...grpc.CallOption) (*GetUserByIdOut, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserByIdOut)
	err := c.cc.Invoke(ctx, Gateway_GetUserById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) GetUserByToken(ctx context.Context, in *GetUserByTokenIn, opts ...grpc.CallOption) (*GetUserByTokenOut, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserByTokenOut)
	err := c.cc.Invoke(ctx, Gateway_GetUserByToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) SetUserFace(ctx context.Context, in *SetUserFaceIn, opts ...grpc.CallOption) (*SetUserFaceOut, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetUserFaceOut)
	err := c.cc.Invoke(ctx, Gateway_SetUserFace_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) SubscribeUnlock(ctx context.Context, in *SubscribeUnlockIn, opts ...grpc.CallOption) (grpc.ServerStreamingClient[UnlockEvent], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Gateway_ServiceDesc.Streams[0], Gateway_SubscribeUnlock_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeUnlockIn, UnlockEvent]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Gateway_SubscribeUnlockClient = grpc.ServerStreamingClient[UnlockEvent]

// GatewayServer is the server API for Gateway service.
// All implementations must embed UnimplementedGatewayServer
// for forward compatibility.
type GatewayServer interface {
	// проверка лицензии
	TestLicence(context.Context, *TestLicenceIn) (*TestLicenceOut, error)
	// получение списка юзеров
	// получаем батчами список через ListUsers и сохраняем в БД (вместе с эмбендингами)
	ListUsers(context.Context, *ListUsersIn) (*ListUsersOut, error)
	GetUserById(context.Context, *GetUserByIdIn) (*GetUserByIdOut, error)
	// получение профиля юзера по QR коду (передаем на бек его содержимое)
	GetUserByToken(context.Context, *GetUserByTokenIn) (*GetUserByTokenOut, error)
	// отправка массива эмбендингов
	SetUserFace(context.Context, *SetUserFaceIn) (*SetUserFaceOut, error)
	// подписка на события об дистанционном открытии двери (для мобильного приложения)
	// передаем в запрос последнее примененное событие об открытии
	// при получении события валидируем время (должно быть больше чем последнее примененнное и отличаться не более чем 1 минуту от времени в системе)
	SubscribeUnlock(*SubscribeUnlockIn, grpc.ServerStreamingServer[UnlockEvent]) error
	mustEmbedUnimplementedGatewayServer()
}

// UnimplementedGatewayServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGatewayServer struct{}

func (UnimplementedGatewayServer) TestLicence(context.Context, *TestLicenceIn) (*TestLicenceOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestLicence not implemented")
}
func (UnimplementedGatewayServer) ListUsers(context.Context, *ListUsersIn) (*ListUsersOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUsers not implemented")
}
func (UnimplementedGatewayServer) GetUserById(context.Context, *GetUserByIdIn) (*GetUserByIdOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserById not implemented")
}
func (UnimplementedGatewayServer) GetUserByToken(context.Context, *GetUserByTokenIn) (*GetUserByTokenOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByToken not implemented")
}
func (UnimplementedGatewayServer) SetUserFace(context.Context, *SetUserFaceIn) (*SetUserFaceOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUserFace not implemented")
}
func (UnimplementedGatewayServer) SubscribeUnlock(*SubscribeUnlockIn, grpc.ServerStreamingServer[UnlockEvent]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeUnlock not implemented")
}
func (UnimplementedGatewayServer) mustEmbedUnimplementedGatewayServer() {}
func (UnimplementedGatewayServer) testEmbeddedByValue()                 {}

// UnsafeGatewayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GatewayServer will
// result in compilation errors.
type UnsafeGatewayServer interface {
	mustEmbedUnimplementedGatewayServer()
}

func RegisterGatewayServer(s grpc.ServiceRegistrar, srv GatewayServer) {
	// If the following call pancis, it indicates UnimplementedGatewayServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Gateway_ServiceDesc, srv)
}

func _Gateway_TestLicence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestLicenceIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).TestLicence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_TestLicence_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).TestLicence(ctx, req.(*TestLicenceIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_ListUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUsersIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).ListUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_ListUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).ListUsers(ctx, req.(*ListUsersIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_GetUserById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserByIdIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetUserById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_GetUserById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetUserById(ctx, req.(*GetUserByIdIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_GetUserByToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserByTokenIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetUserByToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_GetUserByToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetUserByToken(ctx, req.(*GetUserByTokenIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_SetUserFace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetUserFaceIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).SetUserFace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_SetUserFace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).SetUserFace(ctx, req.(*SetUserFaceIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_SubscribeUnlock_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeUnlockIn)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GatewayServer).SubscribeUnlock(m, &grpc.GenericServerStream[SubscribeUnlockIn, UnlockEvent]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Gateway_SubscribeUnlockServer = grpc.ServerStreamingServer[UnlockEvent]

// Gateway_ServiceDesc is the grpc.ServiceDesc for Gateway service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Gateway_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "locky.ai.Gateway",
	HandlerType: (*GatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TestLicence",
			Handler:    _Gateway_TestLicence_Handler,
		},
		{
			MethodName: "ListUsers",
			Handler:    _Gateway_ListUsers_Handler,
		},
		{
			MethodName: "GetUserById",
			Handler:    _Gateway_GetUserById_Handler,
		},
		{
			MethodName: "GetUserByToken",
			Handler:    _Gateway_GetUserByToken_Handler,
		},
		{
			MethodName: "SetUserFace",
			Handler:    _Gateway_SetUserFace_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeUnlock",
			Handler:       _Gateway_SubscribeUnlock_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protobuf/terminal/gateway.proto",
}
